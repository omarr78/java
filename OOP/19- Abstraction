- Example of Abstraction

We want to model different shapes (e.g., Circle, Square) with a common method calculateArea()

Abstract Class:
abstract class Shape {
    // Abstract method (no implementation)
    public abstract double calculateArea();

    // Concrete method (with implementation)
    public void display() {
        System.out.println("This is a shape.");
    }
}

Concrete Subclass (Circle):
class Circle extends Shape {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    @Override
    public double calculateArea() {
        return Math.PI * radius * radius;
    }
}

Explanation:
  Shape is an abstract class with an abstract method calculateArea().
  Circle implements the abstract method.
  We cannot create Shape shape = new Shape();

---------------------------------------------------------------------------------------------------------------

- Why Do Abstract Classes Have a Constructor?

  Even though abstract classes cannot be instantiated, they can have constructors for the following reasons:

  1. Initializing Common Fields: Abstract classes may contain instance variables that subclasses need to initialize.

  abstract class Animal {
      String name;
      
      public Animal(String name) {  // Constructor
          this.name = name;
      }
      
      public abstract void makeSound();
  }

  2. Constructor Chaining: When a subclass is instantiated, its constructor calls the parent (abstract) class constructor via super().

  class Dog extends Animal {
      public Dog(String name) {
          super(name);  // Calls Animal's constructor
      }
      
      @Override
      public void makeSound() {
          System.out.println("Bark!");
      }
  }

-------------------------------------------------------------------------------------------------------------

- Polymorphism with Abstract Classes : Polymorphism allows an abstract class reference to point to subclass objects.

Example

abstract class Vehicle {
    public abstract void move();
}

class Car extends Vehicle {
    @Override
    public void move() {
        System.out.println("Car drives on road.");
    }
}

class Boat extends Vehicle {
    @Override
    public void move() {
        System.out.println("Boat sails on water.");
    }
}

public class Main {
    public static void main(String[] args) {
        Vehicle vehicle1 = new Car();  // Polymorphism
        Vehicle vehicle2 = new Boat(); // Polymorphism

        vehicle1.move(); // Output: "Car drives on road."
        vehicle2.move(); // Output: "Boat sails on water."
    }
}

** A Vehicle reference can point to any subclass object, enabling runtime polymorphism.

---------------------------------------------------------------------------------------------

- Rules

- Rule 1: Abstract Methods Cannot Be Private

abstract class Test {
    private abstract void demo(); // Compile-time Error!
}

Reason: Private methods cannot be inherited, but abstract methods must be overridden by subclasses.

- Rule 2: Abstract Classes Cannot Be Final

final abstract class Test { } // Error: Illegal combination

Reason: final prevents inheritance, but abstract classes require subclassing.

- Rule 3: A Class Must Be Abstract If It Has Abstract Methods

class Test {  // Not abstract
    public abstract void demo(); // Error!
}

Rule 4: Abstraction Applies Only to Classes and Methods

- Abstract classes: Must be declared with abstract.

abstract class Animal { }  // Valid

- Abstract methods: Must be inside an abstract class.

abstract class Animal {
    abstract void eat();  // Valid
}

** Non-abstract elements (variables, constructors, static methods) cannot be abstract.
