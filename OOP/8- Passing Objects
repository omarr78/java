1. Passing Objects to Methods
  In Java, when you pass an object to a method, you are passing the reference to that object.
  This means that the method receives a copy of the reference to the object, not a copy of the object itself.
  As a result, any changes made to the object inside the method will affect the original object.

class Dog {
    String name;

    Dog(String name) {
        this.name = name;
    }
}

public class Main {
    public static void main(String[] args) {
        Dog myDog = new Dog("Buddy");
        System.out.println("Before method call: " + myDog.name); // Output: Buddy

        changeName(myDog);
        System.out.println("After method call: " + myDog.name); // Output: Max
    }

    public static void changeName(Dog dog) {
        dog.name = "Max";
    }
}

2. Passing by Value vs. Passing by Reference
  Java is always pass-by-value in premative data types.
  However, when you pass an object, the value being passed is the reference to the object,

class ClassName {
    int x;
    ClassName(int x) {
        this.x = x;
    }
}
public class Main {
    static void changeNumber(int x){
        x+= 10;
    }
    static void changeNumber2(ClassName c){
        c.x+= 10;
    }
    public static void main(String[] args) {
        int x = 10;
        changeNumber(x);
        System.out.println(x); // 10
        ClassName c = new ClassName(10);
        changeNumber2(c);
        System.out.println(c.x); // 20
    }
}

3. Returning Objects from Methods
  Methods can also return objects. This is useful when you want to create and return a new object or modify an existing one and return it.

class Dog {
    String name;

    Dog(String name) {
        this.name = name;
    }
}

public class Main {
    public static void main(String[] args) {
        Dog myDog = createDog("Buddy");
        System.out.println("Dog's name: " + myDog.name); // Output: Buddy
    }

    public static Dog createDog(String name) {
        Dog newDog = new Dog(name);
        return newDog;
    }
}

4. Comparing Objects
  When comparing objects, you need to be careful because the == operator compares references,
  not the actual content of the objects. To compare the content of objects, you should use the .equals() method

class ClassName {
    int x;
    ClassName(int x) {
        this.x = x;
    }
    void isEqual(ClassName c) {
        System.out.println(this.x == c.x ? "equal" : "not equal");
    }
}

public class Main {
    public static void main(String[] args) {
        ClassName c1 = new ClassName(100);
        ClassName c2 = new ClassName(200);

        c1.isEqual(c2); // not equal
    }
}

