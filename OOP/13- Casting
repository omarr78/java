- In Java, we have two types of castings :
  1. Upcasting
  2. DownCasting


- Now let’s first understand the definitions:
  1. Upcasting: Assigning child class object to parent class reference.
    Animal animal = new Dog(); // Here animal is a parent class reference but points to the child object.
    
    - This reference animal can access all the methods and variables of the parent class but only (overridden methods in the child class).
    - Upcasting gives us the flexibility to access the parent class members, but it is not possible to access all the child class members using this feature.
    - we can only access the overridden methods in the child class.
    - Always safe , no run time error
    - Can be done implicitly , not need to do this : Animal animal = (Animal) new Dog();

    Dog myDog = new Dog();  // Creates a Dog object in memory
    Animal myAnimal = myDog; // Both references point to THE SAME OBJECT
    
    Before assignment:
      myDog → [Dog object at 0x1000]
      myAnimal → null

    After assignment:
      myDog → [Dog object at 0x1000]
                 ↑
      myAnimal ──┘


  2. Downcasting: assigning parent class reference (which is pointing to the child class object) to child class reference.
    - Syntax for down casting : Dog myDog = (Dog) animal;
    - Here animal is pointing to the object of the child class as we saw earlier,
      in the example and now we cast this reference animal to child class reference myDog.
    - Now this child class reference myDog can access all the methods and variables of the child class as well as the parent class.
    - Potentially unsafe (runtime check needed)
    - Must be done explicitly
    - Can throw ClassCastException if invalid
    - Requires instanceof check for safety


  For example, if we have two classes, say (Animal) and (Dog) which extends (Animal) class. Now for upcasting,
  every Dog will be a Animal but for downcasting, every Animal may not be a Dog because there may be some Animals which can be Cat, Camel, etc.
  Hence downcasting is not always safe, and we explicitly write the class names before doing downcasting.
  So that it won’t give an error at compile time but it may throw ClassCastExcpetion at run time,
  if the parent class reference is not pointing to the appropriate child class.
  To get rid of ClassCastException we can use instanceof operator to check right type of class reference in case of down casting.

- why does we need up casting in java ? 


1- let's take an example :

public class Animal {
    String name;

    public void makeNoise() {
        System.out.println("I'm just an animal");
    }
}

public class Dog extends Animal {

    @Override
    public void makeNoise() {
        System.out.println("woof woof!");
    }
    public void growl(){
        System.out.println("Grrrr");
    }
}

public class Cat extends Animal {
    @Override
    public void makeNoise() {
        System.out.println("mew mew mew mew");
    }
}

----------------------------------------------------------------------
public class Main {
    public static void main(String[] args) {
        Animal animal = new Dog();
        animal.makeNoise(); // woof woof!
        Dog dog = new Dog();
        dog.makeNoise(); // woof woof!
        Cat cat = new Cat();
        cat.makeNoise(); // mew mew mew mew
    }
    public static void doAnimalStuff(Animal animal) {
        animal.makeNoise();
    }
}
-----------------------------------------------------------------------
public class Main {
    public static void main(String[] args) {
        Cat cat = new Cat();
        doAnimalStuff(cat); // mew mew mew mew
        Dog dog = new Dog();
        doAnimalStuff(dog); 
        // woof woof!
        // Grrrr
    }
    public static void doAnimalStuff(Animal animal) {
        animal.makeNoise();
        // Down Casting
        if(animal instanceof Dog) {
            Dog dog = (Dog) animal; 
            dog.growl();
        }
    }
}

2- polychromic array types

let's take an example :

// Base class
class Animal {
    private String name;
    
    public Animal(String name) {
        this.name = name;
    }
    
    public String getName() {
        return name;
    }
    
    public void makeSound() {
        System.out.println("Some generic animal sound");
    }
    
    public void eat() {
        System.out.println(name + " is eating");
    }
}

// Derived classes
class Dog extends Animal {
    public Dog(String name) {
        super(name);
    }
    
    @Override
    public void makeSound() {
        System.out.println(getName() + " says: Woof!");
    }
    
    public void fetch() {
        System.out.println(getName() + " is fetching the ball");
    }
}

class Cat extends Animal {
    public Cat(String name) {
        super(name);
    }
    
    @Override
    public void makeSound() {
        System.out.println(getName() + " says: Meow!");
    }
    
    public void climb() {
        System.out.println(getName() + " is climbing a tree");
    }
}

class Bird extends Animal {
    public Bird(String name) {
        super(name);
    }
    
    @Override
    public void makeSound() {
        System.out.println(getName() + " says: Tweet!");
    }
    
    public void fly() {
        System.out.println(getName() + " is flying");
    }
}
----------------------------------------------------------------------------------

public class Zoo {
    public static void main(String[] args) {
        // Create a polymorphic array of Animals
        Animal[] animals = new Animal[5];
        
        // Populate with different animal types (upcasting happens automatically)
        animals[0] = new Dog("Rex");
        animals[1] = new Cat("Whiskers");
        animals[2] = new Bird("Tweety");
        animals[3] = new Dog("Buddy");
        animals[4] = new Cat("Mittens");
        
        // Process all animals polymorphically
        System.out.println("=== All animals making sounds ===");
        for (Animal animal : animals) {
            animal.makeSound(); // Dynamic polymorphism - calls appropriate version
        }
        
        System.out.println("\n=== All animals eating ===");
        for (Animal animal : animals) {
            animal.eat(); // Inherited from Animal, same for all
        }
        
        // Accessing derived-class specific methods
        System.out.println("\n=== Special behaviors ===");
        for (Animal animal : animals) {
            if (animal instanceof Dog) {
                Dog dog = (Dog) animal; // Downcasting
                dog.fetch();
            } else if (animal instanceof Cat) {
                Cat cat = (Cat) animal; // Downcasting
                cat.climb();
            } else if (animal instanceof Bird) {
                Bird bird = (Bird) animal; // Downcasting
                bird.fly();
            }
        }
        
        // Count each animal type
        System.out.println("\n=== Animal census ===");
        int dogs = 0, cats = 0, birds = 0;
        for (Animal animal : animals) {
            if (animal instanceof Dog) dogs++;
            else if (animal instanceof Cat) cats++;
            else if (animal instanceof Bird) birds++;
        }
        System.out.println("Dogs: " + dogs + ", Cats: " + cats + ", Birds: " + birds);
    }
}
--------------------------------------------------------------------------------------------
Output:

=== All animals making sounds ===
Rex says: Woof!
Whiskers says: Meow!
Tweety says: Tweet!
Buddy says: Woof!
Mittens says: Meow!

=== All animals eating ===
Rex is eating
Whiskers is eating
Tweety is eating
Buddy is eating
Mittens is eating

=== Special behaviors ===
Rex is fetching the ball
Whiskers is climbing a tree
Tweety is flying
Buddy is fetching the ball
Mittens is climbing a tree

=== Animal census ===
Dogs: 2, Cats: 2, Birds: 1

----------------------------------------------------------------------
- Key Points About This Polymorphic Array
  
  Array Declaration: Animal[] animals can hold any subclass of Animal
  
  Upcasting: Happens automatically when we assign new Dog(), new Cat(), etc.
  
  Polymorphic Method Calls: animal.makeSound() calls the appropriate version
  
  Downcasting: Needed to access subclass-specific methods (fetch(), climb(), etc.)
  
  Type Checking: instanceof operator checks the actual runtime type
  
  Uniform Processing: We can handle all animals in a single loop
  
  Flexible Extensions: Easy to add new animal types without changing processing code
