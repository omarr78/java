What is a Record?

  A simpler way to define immutable data classes in Java.
  Automatically generates equals(), hashCode(), toString(), and getter methods.

Why Use Records?

  Reduces boilerplate code (no need to manually write getters, setters, constructors, etc.).
  Ensures immutability (fields are final by default).

Before vs. After Records

Before Records (Traditional Java Class)

public final class Person {
    private final String name;
    private final int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() { return name; }
    public int getAge() { return age; }

    @Override
    public boolean equals(Object o) { ... }
    @Override
    public int hashCode() { ... }
    @Override
    public String toString() { ... }
}

After Records (Concise & Readable)

public record Person(String name, int age) { }


- Customization in Records -> You can still add custom methods, constructors, and static fields if needed.

Example:

public record Person(String name, int age) {
    public Person { // Compact constructor (validation)
        if (age < 0) throw new IllegalArgumentException("Age cannot be negative!");
    }
    public String greet() { return "Hello, " + name; }
}

- Limitations of Records ->
  
  Cannot extend other classes (but can implement interfaces).
  All fields are implicitly final (cannot be modified after creation).

- When to Use Records vs. Regular Classes
  Use Records for simple data carriers.
  Use Classes when you need mutability, inheritance, or complex behavior.











