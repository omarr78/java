1. Constructors in Anonymous Classes : Does an anonymous class have a constructor? Can we use the super class constructor?
  Anonymous classes do not have explicit constructors that you can define + anonymous class has no name to have a constructor
  . However:
    - They implicitly call the superclass (parametrize or non parametrize) constructor, And it runs first
    - You can use instance initializer blocks to perform initialization (but not static initializer blocks)

2. Adding Extra Methods in Anonymous Classes
  Can we add extra methods in anonymous classes and how to access them using var?
  Yes, you can add extra methods,
  but you can only access them through the reference if you Use (var) (Java 10+) which infers the anonymous class type

  var obj = new Object() {
      public void extraMethod() {
          System.out.println("Extra method");
      }
  };
  
  obj.extraMethod(); // Works with var

3. Limitations of the var Keyword

  - Global/Member Variables : Cannot use var for class member variables:

  class Test {
      // var x = 10; // Compile error - cannot use 'var' for fields
  }

  - Generic Type Parameters

  // ArrayList<var> list = new ArrayList<>(); // Error - cannot use 'var' as type argument
  // var<Integer> list = new ArrayList<>(); // Error - invalid syntax
  var list = new ArrayList<String>(); // Valid

  - Method Parameters : Cannot use var for method parameters:

  // void method(var param) {} // Compile error

  - Declaration Without Initialization

  // var x; // Error - cannot infer type
  // x = 10;

  - Initialization with null

  // var x = null; // Error - cannot infer type

  - Return Types : Cannot use var as return type:

  // var method() { return 10; } // Compile error



4. Anonymous Class Behavior
  
  1. Accessing Local Variables

    Q: If d = 5, can it be accessed and modified in anonymous class?
    Anonymous classes can access local variables only if they are final or effectively final (Java 8+):
  
  
    void method() {
        final int d = 5; // or just int d = 5;
        Runnable r = new Runnable() {
            @Override
            public void run() {
                System.out.println(d); // Can access
                // d = 10; // Cannot modify - compile error
            }
        };
    }
  

  2. Method Context
    Q: Can anonymous classes be used in any method (not just static)?
    Yes, anonymous classes can be used in:
    
    Static methods
    Instance methods
    Constructors
    Initializer blocks    

  3. Accessing Superclass Members
    Q: Can anonymous class access superclass members?
    Yes, anonymous classes can access:
    
    All accessible members of their superclass/interface
    Final/effectively final local variables from enclosing scope
    Members of the enclosing class (if it's a non-static anonymous class)

    class Super {
        protected int value = 10;
    }
    
    public class Test {
        public static void main(String[] args) {
            Super s = new Super() {
                void print() {
                    System.out.println(value); // Can access superclass member
                }
            };
        }
    }


  4. Static Members in Anonymous Classes


    var obj = new Object() {
        // static { } // Error - no static initializers
        
        // static void method() {} // Error - no static methods
        
        // static int x = 10; // Error - no static variables (except final)
        
        static final int CONSTANT = 100; // Valid - constant
    };

