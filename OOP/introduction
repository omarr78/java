
- Object-oriented programming is a methodology or paradigm to design a program using classes and objects. It has many advantages like:
  . Reusability
  . Readability
  . Performance
  . Space
- Java is a powerful and widely-used programming language that fully supports OOP principles.
- There are other methodologies like:
  . Procedural programming that is used by C, Pascal, COBOL, FORTRAN, Java, Python, C++ ..etc.
  . Event-driven that is used by C#, Visual Basic, Visual C++ and Java.
- Objects are fundamental building blocks in object-oriented programming (OOP) and play a crucial role in the design and implementation of systems.
- Objects or instance is an executable copy of class
- Objects in object-oriented programming (OOP) are composed of two essential members:
  1- data (properties or attributes) 
  2- operations (methods or functions or behaviors). 
  These elements encapsulate the state and behavior of the object, respectively, and work together to represent real-world entities within a software system.
- Let’s explore the car example to better understand these concepts:
  Attributes:
    Name: Represents the brand or manufacturer of the car.
    Max Speed: Indicates the maximum speed the car can achieve.
    Price: Denotes the cost or price of the car.
    Model: Represents the specific model or version of the car.
  Operations:
    move(): Represents the action of moving the car. This method may involve starting the engine, accelerating, braking, and steering.
    calculateVehicleAge(): Calculates the age of the car based on its manufacturing year or model year.
  Getters and Setters:
    get(): Getter methods retrieve the current value of an attribute.
    set(): Setter methods modify or update the value of an attribute.
      These methods allow external code to access and modify the state of the car object in a controlled manner,
      promoting encapsulation and data integrity.
- the class diagram is a graphical representation of the structure and relationships of classes in a software system.
- It visually depicts the classes, their attributes, methods, and associations with other classes.
- Class diagrams provide a high-level overview of the system’s architecture and help developers understand the relationships between different components.
- Class is a blueprint or template or prototype that defines the structure and behavior of objects.
- It serves as a blueprint for creating objects with similar characteristics and functionalities.
- Classes encapsulate data (attributes) and operations (methods) into a single unit, providing a modular and reusable way to model real-world entities within a software system.
